import os
import numpy as np
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Load ResNet50 pre-trained on ImageNet
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Add custom layers for emotion classification
x = base_model.output
x = Flatten()(x)
x = Dense(1024, activation='relu')(x)
x = Dense(7, activation='softmax')(x)  # 7 emotions in AffectNet

# Create the model
emotion_model = Model(inputs=base_model.input, outputs=x)

# Compile the model
emotion_model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

# Ensure the directory for saving the model exists
if not os.path.exists('models'):
    os.makedirs('models')

# Data preparation (Placeholder)
# You should replace these with actual data paths and preprocessing steps
train_data_dir = 'path/to/train_data'  # Update this path
val_data_dir = 'path/to/val_data'      # Update this path

# Data augmentation and preprocessing
train_datagen = ImageDataGenerator(rescale=1.0/255.0, validation_split=0.2)
val_datagen = ImageDataGenerator(rescale=1.0/255.0)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

validation_generator = val_datagen.flow_from_directory(
    train_data_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

# Train the model
emotion_model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // 32,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // 32,
    epochs=10
)

# Save the model
emotion_model.save('models/emotion_model.h5')